import logging
import uuid
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
import os

# Enable logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

# Bot configuration
BOT_TOKEN = os.getenv('BOT_TOKEN', '7922484259:AAH21mVqLF0OAeughkVXXrJ3_zOzuyJICys')
ADMIN_IDS = [int(x.strip()) for x in os.getenv('ADMIN_IDS', '1751803948,6392794694').split(',')]
ADMIN_USERNAME = os.getenv('ADMIN_USERNAME', '@G_king123f')
BTC_WALLET = os.getenv('BTC_WALLET', '8yt1x4XqPJqgdS95M8nrDpczkzyoYr4oGL8NDjEqXASj')

# Global data storage
teachers = []
bookings = []
pending_payments = {}
user_states = {}
teacher_edit_states = {}
user_profiles = {}  # New: store user profiles with referrals, bookings, etc.
referrals = {}  # New: store referral data {user_id: [referred_user_ids]}

# Teacher management conversation states
TEACHER_EDIT_STATES = {
    'WAITING_FOR_FIELD': 'waiting_for_field',
    'WAITING_FOR_VALUE': 'waiting_for_value',
    'WAITING_FOR_NEW_TEACHER': 'waiting_for_new_teacher'
}

# SolCam Token System
REFERRAL_BONUS = 1  # 1 SolCam point per successful referral
SOLCAM_POINTS_PER_HOUR = 1  # 1 SolCam point = 1 hour with cam girl

# Initialize sample teacher data
def initialize_teachers():
    global teachers
    teachers = [
        {
            'id': 1,
            'name': 'Sarah Johnson',
            'age': 28,
            'subjects': ['Mathematics', 'Physics'],
            'price': 25,
            'photo': 'https://images.unsplash.com/photo-1494790108755-2616c78746d5?w=400&h=400&fit=crop&crop=face',
            'available': True,
            'bio': 'Expert mathematician with 5+ years teaching experience. Specializes in making complex concepts simple and engaging.',
            'education': 'MSc Mathematics, Stanford University',
            'experience': '2+ years of webcam worker',
            'rating': 4.9,
            'why_choose': 'i love working on webcam i can make you happy.'
        },
        {
            'id': 2,
            'name': 'Michael Chen',
            'age': 35,
            'subjects': ['Computer Science', 'Programming'],
            'price': 30,
            'photo': 'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=400&h=400&fit=crop&crop=face',
            'available': True,
            'bio': 'Senior software engineer turned educator. Passionate about teaching modern programming and software development.',
            'education': 'PhD Computer Science, MIT',
            'experience': '8+ years industry + 3 years teaching',
            'rating': 4.8,
            'why_choose': 'i do with so many styels ass, footjob, fisting and etc book me love.'
        },
        {
            'id': 3,
            'name': 'Emily Rodriguez',
            'age': 26,
            'subjects': ['English', 'Literature'],
            'price': 20,
            'photo': 'https://images.unsplash.com/photo-1438761681033-6461ffad8d80?w=400&h=400&fit=crop&crop=face',
            'available': True,
            'bio': 'Native English speaker with expertise in literature and creative writing. Makes learning fun and interactive.',
            'education': 'MA English Literature, Oxford University',
            'experience': '4+ years teaching experience',
            'rating': 4.7,
            'why_choose': 'I create engaging lessons that improve both your language skills and confidence.'
        },
         {
            'id': 4,
            'name': 'Emma Wilson',
            'age': 24,
            'subjects': ['Art', 'Design'],
            'price': 22,
            'photo': 'https://images.unsplash.com/photo-1438761681033-6461ffad8d80?w=400&h=400&fit=crop&crop=face',
            'available': True,
            'bio': 'Creative artist with passion for visual arts and design. Makes learning fun and interactive.',
            'education': 'BFA Art & Design, RISD',
            'experience': '3+ years teaching experience',
            'rating': 4.6,
            'why_choose': 'I create engaging lessons that improve both your artistic skills and confidence.'
        },
    ]
    logger.info(f"Initialized {len(teachers)} teachers")

# Helper functions
def is_admin(user_id):
    return user_id in ADMIN_IDS

def create_inline_keyboard(buttons):
    return InlineKeyboardMarkup(buttons)

# Start command
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    chat_id = update.effective_chat.id

    # Handle referral system
    referrer_id = None
    if context.args:
        try:
            referrer_id = int(context.args[0])
            if referrer_id != user.id and referrer_id not in user_profiles.get(user.id, {}).get('referred_by', []):
                # Initialize referrals dict if not exists
                if referrer_id not in referrals:
                    referrals[referrer_id] = []
                
                # Add referral if not already referred
                if user.id not in referrals[referrer_id]:
                    referrals[referrer_id].append(user.id)
                    
                    # Initialize user profile if not exists
                    if user.id not in user_profiles:
                        user_profiles[user.id] = {
                            'referred_by': referrer_id,
                            'solcam_points': 0,  # New user gets 0 SolCam points initially
                            'total_bookings': 0,
                            'total_spent': 0,
                            'current_order': None,  # Track current order
                            'join_date': datetime.now().strftime("%Y-%m-%d")
                        }
                    else:
                        user_profiles[user.id]['referred_by'] = referrer_id
                        if 'solcam_points' not in user_profiles[user.id]:
                            user_profiles[user.id]['solcam_points'] = 0
                        if 'current_order' not in user_profiles[user.id]:
                            user_profiles[user.id]['current_order'] = None
                    
                    # Add SolCam points to referrer
                    if referrer_id not in user_profiles:
                        user_profiles[referrer_id] = {
                            'solcam_points': REFERRAL_BONUS,
                            'total_bookings': 0,
                            'total_spent': 0,
                            'current_order': None,
                            'join_date': datetime.now().strftime("%Y-%m-%d")
                        }
                    else:
                        user_profiles[referrer_id]['solcam_points'] = user_profiles[referrer_id].get('solcam_points', 0) + REFERRAL_BONUS
                    
                    # Notify referrer
                    try:
                        await context.bot.send_message(
                            referrer_id,
                            f"üéâ Great! {user.first_name} joined using your referral link!\n"
                            f"ü™ô You earned {REFERRAL_BONUS} SolCam points! Use them to book cam girls for free!"
                        )
                    except:
                        pass
        except (ValueError, IndexError):
            pass

    # Initialize user profile if not exists
    if user.id not in user_profiles:
        user_profiles[user.id] = {
            'solcam_points': 0,
            'total_bookings': 0,
            'total_spent': 0,
            'current_order': None,
            'join_date': datetime.now().strftime("%Y-%m-%d")
        }

    # Store user information
    user_states[user.id] = {
        'username': user.username or "No username set",
        'full_name': user.full_name or "Unknown User",
        'chat_id': chat_id
    }

    welcome_message = f"""üíã Welcome to SOLCAM! üíã

Hello {user.first_name}! üëã

I'm your personal beautiful girls booking assistant. Here's what I can help you with:

ü©∑ For Girls:
‚Ä¢ Browse amazing beautiful cam girls
‚Ä¢ View detailed profiles
‚Ä¢ Book sessions with Bitcoin or SolCam points
‚Ä¢ Earn SolCam points through referrals

ü™ô SolCam Token Airdrop:
‚Ä¢ Earn points now for future token airdrop
‚Ä¢ 1 referral = 1 SolCam point
‚Ä¢ Use points to book girls before token launch

Ready to start BOOM BOOM üí¶? Choose an option below!

üí¨ Need Support? Contact us: {ADMIN_USERNAME}"""

    keyboard = [
        [InlineKeyboardButton("üíã Browse Models", callback_data='check_teachers')],
        [InlineKeyboardButton("üë§ My Profile", callback_data='my_profile'), InlineKeyboardButton("üéÅ Refer & Earn", callback_data='referral_system')],
        [InlineKeyboardButton("‚ÑπÔ∏è How It Works", callback_data='how_it_works'), InlineKeyboardButton("üí¨ Contact Support", callback_data='contact_support')]
    ]

    # Add admin panel button only for admins
    if is_admin(user.id):
        keyboard.append([InlineKeyboardButton("üîß Admin Panel", callback_data='admin')])

    reply_markup = create_inline_keyboard(keyboard)
    await context.bot.send_message(chat_id, welcome_message, reply_markup=reply_markup)

# Admin panel
async def admin(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    chat_id = update.effective_chat.id

    if not is_admin(user.id):
        await context.bot.send_message(chat_id, '‚ùå Access denied. Admin only.')
        return

    # Calculate SolCam points stats
    total_points_issued = sum(profile.get('solcam_points', 0) for profile in user_profiles.values())
    points_bookings = [b for b in bookings if b.get('payment_method') == 'solcam_points']
    pending_points_bookings = [b for b in bookings if b.get('payment_method') == 'solcam_points' and b.get('status') == 'pending_admin_approval']

    admin_message = f"""üîß ADMIN CONTROL PANEL üîß
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üëã Welcome, Admin {user.first_name}!

üìä System Status:
‚Ä¢ Models: {len(teachers)}
‚Ä¢ Total Bookings: {len(bookings)}
‚Ä¢ Bitcoin Pending: {len(pending_payments)}
‚Ä¢ Points Pending: {len(pending_points_bookings)}
‚Ä¢ Active Admins: {len(ADMIN_IDS)}

ü™ô SolCam Token Stats:
‚Ä¢ Total Points Issued: {total_points_issued} SolCam
‚Ä¢ Points Bookings: {len(points_bookings)}
‚Ä¢ Registered Users: {len(user_profiles)}

Choose an admin action below:"""

    keyboard = [
        [InlineKeyboardButton("üíã Manage Model", callback_data='manage_teachers')],
        [InlineKeyboardButton("üìã View Bookings", callback_data='view_bookings'), InlineKeyboardButton("ü™ô Points Bookings", callback_data='view_points_bookings')],
        [InlineKeyboardButton("üí∞ Bitcoin Pending", callback_data='view_payments'), InlineKeyboardButton("üîÑ Points Pending", callback_data='view_points_pending')],
        [InlineKeyboardButton("‚ûï Add New Model", callback_data='add_teacher')],
        [InlineKeyboardButton("üîô Back to Main", callback_data='back_to_main')]
    ]

    reply_markup = create_inline_keyboard(keyboard)
    await context.bot.send_message(chat_id, admin_message, reply_markup=reply_markup)

# Show available teachers
async def show_available_teachers(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    chat_id = update.effective_chat.id

    if not teachers:
        await context.bot.send_message(chat_id, '‚ùå No model available at the moment.')
        return

    # Header message
    header_message = """üî• OUR AMAZING GIRLS üî•
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

Choose your perfect beautiful girls from our curated selection and have fun with your lady üí¶  ü•µ! :"""

    await context.bot.send_message(chat_id, header_message)

    # Send each teacher as individual card
    for teacher in teachers:
        if teacher['available']:
            teacher_card = f"""üëô Name: {teacher['name']}
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üòò Age: {teacher['age']} years

üòà Interested: {', '.join(teacher['subjects'])}

üí∏ Rate: ${teacher['price']}/hour

‚≠ê Rating: {teacher.get('rating', 'N/A')}/5.0

üëôWhy Choose {teacher['name'].split()[0]}:
"{teacher.get('why_choose', 'Professional model.')}"

üí° Experience: {teacher.get('experience', 'Experienced educator')}

‚úÖ Status: Available Now

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"""

            keyboard = [
                [InlineKeyboardButton("üçë View Full Profile", callback_data=f"profile_teacher_{teacher['id']}")],
                [InlineKeyboardButton("üíÉ Book Meüòò", callback_data=f"book_teacher_{teacher['id']}"), InlineKeyboardButton("üí¨ Message", callback_data=f"message_teacher_{teacher['id']}")]
            ]
            reply_markup = create_inline_keyboard(keyboard)

            try:
                if teacher.get('photo'):
                    await context.bot.send_photo(
                        chat_id=chat_id,
                        photo=teacher['photo'],
                        caption=teacher_card,
                        reply_markup=reply_markup
                    )
                else:
                    await context.bot.send_message(
                        chat_id=chat_id,
                        text=teacher_card,
                        reply_markup=reply_markup
                    )
            except Exception as e:
                logger.error(f"Error sending model card for {teacher['name']}: {e}")
                await context.bot.send_message(
                    chat_id=chat_id,
                    text=teacher_card,
                    reply_markup=reply_markup
                )

    # Add navigation menu at the end
    nav_message = """‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üî• Ready to book your perfect girl? üî•
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"""

    nav_keyboard = [
        [InlineKeyboardButton("üë§ My Profile", callback_data='my_profile'), InlineKeyboardButton("üéÅ Refer & Earn", callback_data='referral_system')],
        [InlineKeyboardButton("‚ÑπÔ∏è How It Works", callback_data='how_it_works'), InlineKeyboardButton("üí¨ Support", callback_data='contact_support')],
        [InlineKeyboardButton("üîô Back to Main", callback_data='back_to_main')]
    ]
    nav_reply_markup = create_inline_keyboard(nav_keyboard)
    await context.bot.send_message(chat_id, nav_message, reply_markup=nav_reply_markup)

# Show detailed teacher profile
async def show_teacher_profile(update: Update, context: ContextTypes.DEFAULT_TYPE, teacher_id: int) -> None:
    chat_id = update.effective_chat.id

    teacher = next((t for t in teachers if t['id'] == teacher_id), None)

    if not teacher:
        await context.bot.send_message(chat_id, '‚ùå Model not found.')
        return

    profile_text = f"""üåü {teacher['name']} - Full Profile üåü
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üíÉ PERSONAL INFO:
üéÇ Age: {teacher['age']} years
üî• Specializes in: {', '.join(teacher['subjects'])}
‚≠ê Rating: {teacher.get('rating', 'N/A')}/5.0

üòà Education:
{teacher.get('education', 'Not specified')}

üíÑ EXPERIENCE:
{teacher.get('experience', 'Not specified')}

üìù ABOUT {teacher['name'].split()[0]}:
{teacher.get('bio', 'Professional with this field.')}

üéØ WHY CHOOSE {teacher['name'].split()[0]}:
{teacher.get('why_choose', 'loyalty and trust also beauty.')}

üí∏ PRICING:
Rate: ${teacher['price']} /hour
‚≠ê Status: {'‚úÖ Available Now' if teacher['available'] else '‚ùå Currently Unavailable'}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üíã Want her? Tap below to book your private moment!"""

    keyboard = [
        [InlineKeyboardButton("üíã Book Me Now üíã", callback_data=f"book_teacher_{teacher['id']}")],
        [InlineKeyboardButton("‚Üê Back to All Models", callback_data='check_teachers')]
    ]
    reply_markup = create_inline_keyboard(keyboard)

    try:
        if teacher.get('photo'):
            await context.bot.send_photo(
                chat_id=chat_id,
                photo=teacher['photo'],
                caption=profile_text,
                reply_markup=reply_markup
            )
        else:
            await context.bot.send_message(
                chat_id=chat_id,
                text=profile_text,
                reply_markup=reply_markup
            )
    except Exception as e:
        logger.error(f"Error sending teacher profile for {teacher['name']}: {e}")
        await context.bot.send_message(
            chat_id=chat_id,
            text=profile_text,
            reply_markup=reply_markup
        )

# Handle teacher booking
async def handle_book_teacher(update: Update, context: ContextTypes.DEFAULT_TYPE, teacher_id: int) -> None:
    user = update.effective_user
    chat_id = update.effective_chat.id
    user_id = user.id

    # Get user info
    user_info = user_states.get(user_id, {})
    student_username = user_info.get('username', 'No username set')
    student_full_name = user_info.get('full_name', 'Unknown User')

    teacher = next((t for t in teachers if t['id'] == teacher_id), None)

    if not teacher:
        await context.bot.send_message(chat_id, '‚ùå Model not found.')
        return

    if not teacher['available']:
        await context.bot.send_message(chat_id, '‚ùå This Model is currently unavailable.')
        return

    # Check user's SolCam points
    user_points = user_profiles.get(user_id, {}).get('solcam_points', 0)
    points_needed = teacher['price'] * SOLCAM_POINTS_PER_HOUR  # 1 point per hour
    
    # Create booking
    booking_id = str(uuid.uuid4())[:8]
    
    # Determine payment method
    if user_points >= points_needed:
        # User has enough SolCam points
        payment_method = 'solcam_points'
        booking = {
            'id': booking_id,
            'student_id': user_id,
            'student_username': student_username,
            'student_name': student_full_name,
            'teacher_id': teacher_id,
            'teacher_name': teacher['name'],
            'price': teacher['price'],
            'points_cost': points_needed,
            'payment_method': 'solcam_points',
            'status': 'pending_admin_approval',
            'created_at': datetime.now()
        }
        
        # Update user's current order
        user_profiles[user_id]['current_order'] = {
            'booking_id': booking_id,
            'teacher_name': teacher['name'],
            'status': 'pending_admin_approval',
            'payment_method': 'solcam_points',
            'points_used': points_needed
        }
        
        payment_message = f"""ü™ô SOLCAM POINTS BOOKING ü™ô
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

‚úÖ BOOKING CONFIRMED WITH POINTS!

üìã BOOKING DETAILS:
‚Ä¢ Model: {teacher['name']}
‚Ä¢ Cost: {points_needed} SolCam Points
‚Ä¢ Your Points: {user_points} SolCam
‚Ä¢ Remaining: {user_points - points_needed} SolCam
‚Ä¢ Booking ID: {booking_id}

‚è∞ Your booking is pending admin approval.
üìû You'll be contacted within 5 minutes after approval!

ü™ô Thank you for using SolCam points! 
Future token holders get priority! üöÄ"""
        
    else:
        # User needs to pay with Bitcoin
        payment_method = 'bitcoin'
        booking = {
            'id': booking_id,
            'student_id': user_id,
            'student_username': student_username,
            'student_name': student_full_name,
            'teacher_id': teacher_id,
            'teacher_name': teacher['name'],
            'price': teacher['price'],
            'payment_method': 'bitcoin',
            'status': 'pending_payment',
            'created_at': datetime.now()
        }
        
        # Update user's current order
        user_profiles[user_id]['current_order'] = {
            'booking_id': booking_id,
            'teacher_name': teacher['name'],
            'status': 'pending_payment',
            'payment_method': 'bitcoin',
            'price': teacher['price']
        }
        
        payment_message = f"""üí∞ BITCOIN PAYMENT REQUIRED üí∞
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üìã BOOKING DETAILS:
‚Ä¢ Model: {teacher['name']}
‚Ä¢ Price: ${teacher['price']}/hour
‚Ä¢ Booking ID: {booking_id}

ü™ô SolCam Points Status:
‚Ä¢ You have: {user_points} SolCam points
‚Ä¢ Needed: {points_needed} SolCam points
‚Ä¢ Earn more points by referring friends! 

üí≥ Payment:
Send ${teacher['price']} worth of Solana to this wallet:

{BTC_WALLET}

üì∏ Next Steps:
1. Send the payment
2. Take a screenshot of the transaction
3. Send the screenshot to this chat
4. Wait for admin confirmation

‚è∞ After payment verification, your teacher will contact you within 5 minutes."""

    bookings.append(booking)
    if payment_method == 'bitcoin':
        pending_payments[booking_id] = booking

    await context.bot.send_message(chat_id, payment_message)

    # Notify admin about new booking
    username_display = f"@{student_username}" if student_username != "No username set" else "‚ùå No username set"

    if payment_method == 'solcam_points':
        admin_notification = f"""ü™ô NEW SOLCAM POINTS BOOKING! ü™ô
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üë§ USER INFORMATION:
üìù Name: {student_full_name}
üè∑Ô∏è Username: {username_display}
üÜî User ID: {user_id}
üí¨ Chat ID: {chat_id}

üíÉ MODEL BOOKED:
üåü {teacher['name']}
ü™ô Cost: {points_needed} SolCam Points
üí∞ Rate: ${teacher['price']}/hour

üìä BOOKING DETAILS:
üÜî Booking ID: {booking_id}
üìÖ Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
‚è≥ Status: Pending Admin Approval

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üìû CONTACT USER:
‚Ä¢ Use username: {username_display}
‚Ä¢ Or message directly via User ID: {user_id}

‚ö° ACTION REQUIRED: Approve or reject SolCam points booking!"""

        keyboard = [
            [InlineKeyboardButton("‚úÖ Approve Points Booking", callback_data=f"approve_points_{booking_id}")],
            [InlineKeyboardButton("‚ùå Reject Points Booking", callback_data=f"reject_points_{booking_id}")]
        ]
    else:
        admin_notification = f"""üîî NEW BITCOIN BOOKING! üîî
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üë§ USER INFORMATION:
üìù Name: {student_full_name}
üè∑Ô∏è Username: {username_display}
üÜî User ID: {user_id}
üí¨ Chat ID: {chat_id}

üíÉ MODEL BOOKED:
üåü {teacher['name']}
üí∞ Rate: ${teacher['price']}/hour

üìä BOOKING DETAILS:
üÜî Booking ID: {booking_id}
üìÖ Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
‚è≥ Status: Waiting for payment screenshot

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üìû CONTACT USER:
‚Ä¢ Use username: {username_display}
‚Ä¢ Or message directly via User ID: {user_id}

‚ö° ACTION REQUIRED: Wait for payment screenshot!"""

        keyboard = [
            [InlineKeyboardButton("‚úÖ Confirm Payment", callback_data=f"confirm_payment_{booking_id}")],
            [InlineKeyboardButton("‚ùå Reject Payment", callback_data=f"reject_payment_{booking_id}")]
        ]

    reply_markup = create_inline_keyboard(keyboard)

    # Send to all admins
    for admin_id in ADMIN_IDS:
        try:
            await context.bot.send_message(admin_id, admin_notification, reply_markup=reply_markup)
        except Exception as e:
            logger.error(f"Failed to send admin notification to {admin_id}: {e}")

# Handle payment confirmation
async def handle_confirm_payment(update: Update, context: ContextTypes.DEFAULT_TYPE, booking_id: str) -> None:
    user = update.effective_user

    if not is_admin(user.id):
        await context.bot.send_message(update.effective_chat.id, '‚ùå Access denied. Admin only.')
        return

    booking = pending_payments.get(booking_id)
    if not booking:
        await context.bot.send_message(update.effective_chat.id, '‚ùå Booking not found.')
        return

    # Update booking status
    booking['status'] = 'confirmed'
    booking['confirmed_at'] = datetime.now()
    booking['confirmed_by'] = user.id

    # Update user profile stats
    user_id = booking['student_id']
    if user_id in user_profiles:
        user_profiles[user_id]['total_bookings'] += 1
        user_profiles[user_id]['total_spent'] += booking['price']
        # Update current order status
        if user_profiles[user_id].get('current_order'):
            user_profiles[user_id]['current_order']['status'] = 'confirmed'

    # Remove from pending payments
    del pending_payments[booking_id]

    # Notify student
    student_message = f"""‚úÖ PAYMENT CONFIRMED! ‚úÖ

üéâ Great news! Your booking has been confirmed.

üìã Booking Details:
‚Ä¢ Model: {booking['teacher_name']}
‚Ä¢ Booking ID: {booking_id}
‚Ä¢ Status: ‚úÖ Confirmed

üìû Next Steps:
Your model will contact you within 5 minutes to schedule your session.

Thank you for choosing SolCam! üíÉ """

    try:
        await context.bot.send_message(booking['student_id'], student_message)
    except Exception as e:
        logger.error(f"Failed to notify student {booking['student_id']}: {e}")

    # Notify admin
    await context.bot.send_message(
        update.effective_chat.id,
        f"‚úÖ Payment confirmed for booking {booking_id}. Student has been notified."
    )

# Handle payment rejection
async def handle_reject_payment(update: Update, context: ContextTypes.DEFAULT_TYPE, booking_id: str) -> None:
    user = update.effective_user

    if not is_admin(user.id):
        await context.bot.send_message(update.effective_chat.id, '‚ùå Access denied. Admin only.')
        return

    booking = pending_payments.get(booking_id)
    if not booking:
        await context.bot.send_message(update.effective_chat.id, '‚ùå Booking not found.')
        return

    # Update booking status
    booking['status'] = 'rejected'
    booking['rejected_at'] = datetime.now()
    booking['rejected_by'] = user.id

    # Update user's current order status
    user_id = booking['student_id']
    if user_id in user_profiles and user_profiles[user_id].get('current_order'):
        user_profiles[user_id]['current_order']['status'] = 'rejected'

    # Remove from pending payments
    del pending_payments[booking_id]

    # Notify student
    student_message = f"""‚ùå Payment Issue ‚ùå

We couldn't verify your payment for booking {booking_id}.

üìû Next Steps:
‚Ä¢ Please check your Solana transaction
‚Ä¢ Contact our admin: {ADMIN_USERNAME}
‚Ä¢ Or try booking again

We're here to help! ü§ù"""

    try:
        await context.bot.send_message(booking['student_id'], student_message)
    except Exception as e:
        logger.error(f"Failed to notify student {booking['student_id']}: {e}")

    # Notify admin
    await context.bot.send_message(
        update.effective_chat.id,
        f"‚ùå Payment rejected for booking {booking_id}. Student has been notified."
    )

# Handle SolCam points booking approval
async def handle_approve_points_booking(update: Update, context: ContextTypes.DEFAULT_TYPE, booking_id: str) -> None:
    user = update.effective_user

    if not is_admin(user.id):
        await context.bot.send_message(update.effective_chat.id, '‚ùå Access denied. Admin only.')
        return

    # Find booking in bookings list
    booking = next((b for b in bookings if b['id'] == booking_id), None)
    if not booking:
        await context.bot.send_message(update.effective_chat.id, '‚ùå Booking not found.')
        return

    if booking['payment_method'] != 'solcam_points':
        await context.bot.send_message(update.effective_chat.id, '‚ùå This is not a SolCam points booking.')
        return

    # Update booking status
    booking['status'] = 'confirmed'
    booking['confirmed_at'] = datetime.now()
    booking['confirmed_by'] = user.id

    # Update user profile stats and deduct points
    user_id = booking['student_id']
    if user_id in user_profiles:
        user_profiles[user_id]['total_bookings'] += 1
        user_profiles[user_id]['solcam_points'] -= booking['points_cost']
        # Update current order status
        if user_profiles[user_id].get('current_order'):
            user_profiles[user_id]['current_order']['status'] = 'confirmed'

    # Notify student
    student_message = f"""‚úÖ SOLCAM POINTS BOOKING APPROVED! ‚úÖ

üéâ Great news! Your SolCam points booking has been approved.

üìã Booking Details:
‚Ä¢ Model: {booking['teacher_name']}
‚Ä¢ Booking ID: {booking_id}
‚Ä¢ Points Used: {booking['points_cost']} SolCam
‚Ä¢ Status: ‚úÖ Confirmed

üìû Next Steps:
Your model will contact you within 5 minutes to schedule your session.

ü™ô Thank you for being an early SolCam adopter! 
Your loyalty will be rewarded in our token airdrop! üöÄ"""

    try:
        await context.bot.send_message(booking['student_id'], student_message)
    except Exception as e:
        logger.error(f"Failed to notify student {booking['student_id']}: {e}")

    # Notify admin
    await context.bot.send_message(
        update.effective_chat.id,
        f"‚úÖ SolCam points booking approved for {booking_id}. Student has been notified.\n"
        f"Points deducted: {booking['points_cost']} SolCam"
    )

# Handle SolCam points booking rejection
async def handle_reject_points_booking(update: Update, context: ContextTypes.DEFAULT_TYPE, booking_id: str) -> None:
    user = update.effective_user

    if not is_admin(user.id):
        await context.bot.send_message(update.effective_chat.id, '‚ùå Access denied. Admin only.')
        return

    # Find booking in bookings list
    booking = next((b for b in bookings if b['id'] == booking_id), None)
    if not booking:
        await context.bot.send_message(update.effective_chat.id, '‚ùå Booking not found.')
        return

    if booking['payment_method'] != 'solcam_points':
        await context.bot.send_message(update.effective_chat.id, '‚ùå This is not a SolCam points booking.')
        return

    # Update booking status
    booking['status'] = 'rejected'
    booking['rejected_at'] = datetime.now()
    booking['rejected_by'] = user.id

    # Update user's current order status
    user_id = booking['student_id']
    if user_id in user_profiles and user_profiles[user_id].get('current_order'):
        user_profiles[user_id]['current_order']['status'] = 'rejected'

    # Notify student
    student_message = f"""‚ùå SolCam Points Booking Rejected ‚ùå

We're sorry, but your SolCam points booking {booking_id} has been rejected.

üìû Next Steps:
‚Ä¢ Contact our admin: {ADMIN_USERNAME}
‚Ä¢ Your SolCam points have NOT been deducted
‚Ä¢ You can try booking again
‚Ä¢ Or try booking with Bitcoin payment

We're here to help! ü§ù"""

    try:
        await context.bot.send_message(booking['student_id'], student_message)
    except Exception as e:
        logger.error(f"Failed to notify student {booking['student_id']}: {e}")

    # Notify admin
    await context.bot.send_message(
        update.effective_chat.id,
        f"‚ùå SolCam points booking rejected for {booking_id}. Student has been notified."
    )

# Manage teachers (admin)
async def manage_teachers(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    chat_id = update.effective_chat.id

    if not is_admin(user.id):
        await context.bot.send_message(chat_id, '‚ùå Access denied. Admin only.')
        return

    if not teachers:
        await context.bot.send_message(chat_id, '‚ùå No model available.')
        return

    management_message = """üíÉ MODEL MANAGEMENT üíÉ
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

Select a teacher to edit their profile:"""

    keyboard = []
    for teacher in teachers:
        keyboard.append([InlineKeyboardButton(f"‚úèÔ∏è Edit {teacher['name']}", callback_data=f"edit_teacher_{teacher['id']}")])

    keyboard.append([InlineKeyboardButton("‚ùå Remove Model", callback_data='remove_teacher_menu')])
    keyboard.append([InlineKeyboardButton("üîô Back to Admin", callback_data='admin')])

    reply_markup = create_inline_keyboard(keyboard)
    await context.bot.send_message(chat_id, management_message, reply_markup=reply_markup)

# Edit teacher profile
async def edit_teacher(update: Update, context: ContextTypes.DEFAULT_TYPE, teacher_id: int) -> None:
    user = update.effective_user
    chat_id = update.effective_chat.id

    if not is_admin(user.id):
        await context.bot.send_message(chat_id, '‚ùå Access denied. Admin only.')
        return

    teacher = next((t for t in teachers if t['id'] == teacher_id), None)
    if not teacher:
        await context.bot.send_message(chat_id, '‚ùå model not found.')
        return

    edit_message = f"""‚úèÔ∏è EDIT MODEL PROFILE ‚úèÔ∏è
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üë®‚Äçüè´ Current Profile: {teacher['name']}

Select field to edit:"""

    keyboard = [
        [InlineKeyboardButton("ü©∑ Name", callback_data=f"edit_field_name_{teacher_id}")],
        [InlineKeyboardButton("üòò Age", callback_data=f"edit_field_age_{teacher_id}")],
        [InlineKeyboardButton("üí∞ Price", callback_data=f"edit_field_price_{teacher_id}")],
        [InlineKeyboardButton("ü•µ Interested", callback_data=f"edit_field_subjects_{teacher_id}")],
        [InlineKeyboardButton("üéØ Why Choose", callback_data=f"edit_field_why_choose_{teacher_id}")],
        [InlineKeyboardButton("üìñ Bio", callback_data=f"edit_field_bio_{teacher_id}")],
        [InlineKeyboardButton("üéì Education", callback_data=f"edit_field_education_{teacher_id}")],
        [InlineKeyboardButton("üòà Experience", callback_data=f"edit_field_experience_{teacher_id}")],
        [InlineKeyboardButton("‚≠ê Rating", callback_data=f"edit_field_rating_{teacher_id}")],
        [InlineKeyboardButton("üì∏ Photo URL", callback_data=f"edit_field_photo_{teacher_id}")],
        [InlineKeyboardButton("üîô Back", callback_data='manage_teachers')]
    ]

    reply_markup = create_inline_keyboard(keyboard)
    await context.bot.send_message(chat_id, edit_message, reply_markup=reply_markup)

# Show bookings for admin
async def show_bookings_admin(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    chat_id = update.effective_chat.id

    if not is_admin(user.id):
        await context.bot.send_message(chat_id, '‚ùå Access denied. Admin only.')
        return

    if not bookings:
        await context.bot.send_message(chat_id, '‚ùå No bookings yet.')
        return

    bookings_list = 'üìä BOOKINGS MANAGEMENT üìä\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n'

    for i, booking in enumerate(bookings, 1):
        username_display = f"@{booking.get('student_username', 'No username')}" if booking.get('student_username') != "No username set" else "‚ùå No username"

        bookings_list += f"""üìã Booking #{i}
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üë§ STUDENT INFO:
üìù Name: {booking.get('student_name', 'Unknown')}
üè∑Ô∏è Username: {username_display}
üÜî User ID: {booking['student_id']}

üíÉ MODEL: {booking['teacher_name']}
üí∞ PRICE: ${booking['price']}
üìÖ DATE: {booking['created_at'].strftime('%Y-%m-%d %H:%M:%S')}
üîÑ STATUS: {booking['status']}

üÜî Booking ID: {booking['id']}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

"""

    await context.bot.send_message(chat_id, bookings_list)

# Show pending payments for admin
async def show_pending_payments(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    chat_id = update.effective_chat.id

    if not is_admin(user.id):
        await context.bot.send_message(chat_id, '‚ùå Access denied. Admin only.')
        return

    if not pending_payments:
        await context.bot.send_message(chat_id, '‚úÖ No pending payments.')
        return

    payments_list = 'üí∞ PENDING PAYMENTS üí∞\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n'

    for booking_id, booking in pending_payments.items():
        username_display = f"@{booking.get('student_username', 'No username')}" if booking.get('student_username') != "No username set" else "‚ùå No username"

        payments_list += f"""üí≥ Payment #{booking_id}
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üë§ USER: {booking.get('student_name', 'Unknown')}
üè∑Ô∏è USERNAME: {username_display}
üíÉ MODEL: {booking['teacher_name']}
üí∞ AMOUNT: ${booking['price']}
üìÖ DATE: {booking['created_at'].strftime('%Y-%m-%d %H:%M:%S')}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

"""

    keyboard = []
    for booking_id in pending_payments.keys():
        keyboard.append([
            InlineKeyboardButton(f"‚úÖ Confirm {booking_id}", callback_data=f"confirm_payment_{booking_id}"),
            InlineKeyboardButton(f"‚ùå Reject {booking_id}", callback_data=f"reject_payment_{booking_id}")
        ])

    keyboard.append([InlineKeyboardButton("üîô Back to Admin", callback_data='admin')])
    reply_markup = create_inline_keyboard(keyboard)

    await context.bot.send_message(chat_id, payments_list, reply_markup=reply_markup)

# Show SolCam points bookings for admin
async def show_points_bookings_admin(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    chat_id = update.effective_chat.id

    if not is_admin(user.id):
        await context.bot.send_message(chat_id, '‚ùå Access denied. Admin only.')
        return

    points_bookings = [b for b in bookings if b.get('payment_method') == 'solcam_points']

    if not points_bookings:
        await context.bot.send_message(chat_id, '‚ùå No SolCam points bookings yet.')
        return

    bookings_list = 'ü™ô SOLCAM POINTS BOOKINGS ü™ô\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n'

    for i, booking in enumerate(points_bookings, 1):
        username_display = f"@{booking.get('student_username', 'No username')}" if booking.get('student_username') != "No username set" else "‚ùå No username"
        status_emoji = {"pending_admin_approval": "üîÑ", "confirmed": "‚úÖ", "rejected": "‚ùå"}
        emoji = status_emoji.get(booking['status'], "‚ùì")

        bookings_list += f"""ü™ô Points Booking #{i}
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üë§ STUDENT INFO:
üìù Name: {booking.get('student_name', 'Unknown')}
üè∑Ô∏è Username: {username_display}
üÜî User ID: {booking['student_id']}

üíÉ MODEL: {booking['teacher_name']}
ü™ô POINTS COST: {booking.get('points_cost', 0)} SolCam
üìÖ DATE: {booking['created_at'].strftime('%Y-%m-%d %H:%M:%S')}
üîÑ STATUS: {emoji} {booking['status'].replace('_', ' ').title()}

üÜî Booking ID: {booking['id']}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

"""

    keyboard = [[InlineKeyboardButton("üîô Back to Admin", callback_data='admin')]]
    reply_markup = create_inline_keyboard(keyboard)
    await context.bot.send_message(chat_id, bookings_list, reply_markup=reply_markup)

# Show pending SolCam points bookings for admin
async def show_pending_points_bookings(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    chat_id = update.effective_chat.id

    if not is_admin(user.id):
        await context.bot.send_message(chat_id, '‚ùå Access denied. Admin only.')
        return

    pending_points = [b for b in bookings if b.get('payment_method') == 'solcam_points' and b.get('status') == 'pending_admin_approval']

    if not pending_points:
        await context.bot.send_message(chat_id, '‚úÖ No pending SolCam points bookings.')
        return

    bookings_list = 'üîÑ PENDING SOLCAM POINTS BOOKINGS üîÑ\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n'

    for booking in pending_points:
        username_display = f"@{booking.get('student_username', 'No username')}" if booking.get('student_username') != "No username set" else "‚ùå No username"

        bookings_list += f"""üîÑ Pending Points Booking
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üë§ USER: {booking.get('student_name', 'Unknown')}
üè∑Ô∏è USERNAME: {username_display}
üíÉ MODEL: {booking['teacher_name']}
ü™ô POINTS COST: {booking.get('points_cost', 0)} SolCam
üìÖ DATE: {booking['created_at'].strftime('%Y-%m-%d %H:%M:%S')}

üÜî Booking ID: {booking['id']}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

"""

    keyboard = []
    for booking in pending_points:
        keyboard.append([
            InlineKeyboardButton(f"‚úÖ Approve {booking['id']}", callback_data=f"approve_points_{booking['id']}"),
            InlineKeyboardButton(f"‚ùå Reject {booking['id']}", callback_data=f"reject_points_{booking['id']}")
        ])

    keyboard.append([InlineKeyboardButton("üîô Back to Admin", callback_data='admin')])
    reply_markup = create_inline_keyboard(keyboard)

    await context.bot.send_message(chat_id, bookings_list, reply_markup=reply_markup)

# Add new teacher
async def add_teacher(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    chat_id = update.effective_chat.id

    if not is_admin(user.id):
        await context.bot.send_message(chat_id, '‚ùå Access denied. Admin only.')
        return

    # Set user state for adding teacher
    teacher_edit_states[user.id] = {
        'state': TEACHER_EDIT_STATES['WAITING_FOR_NEW_TEACHER'],
        'step': 'name',
        'teacher_data': {}
    }

    add_message = """‚ûï ADD NEW MODEL ‚ûï
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

Let's add a new model to the system!

üìù Step 1: model Name
Please enter the model's full name:"""

    await context.bot.send_message(chat_id, add_message)

# Remove teacher
async def remove_teacher(update: Update, context: ContextTypes.DEFAULT_TYPE, teacher_id: int) -> None:
    user = update.effective_user
    chat_id = update.effective_chat.id

    if not is_admin(user.id):
        await context.bot.send_message(chat_id, '‚ùå Access denied. Admin only.')
        return

    # Find and remove teacher
    global teachers
    teacher = next((t for t in teachers if t['id'] == teacher_id), None)

    if not teacher:
        await context.bot.send_message(chat_id, '‚ùå Model not found.')
        return

    teachers = [t for t in teachers if t['id'] != teacher_id]

    await context.bot.send_message(
        chat_id,
        f"‚úÖ Model '{teacher['name']}' has been removed successfully."
    )

# Handle field editing
async def handle_edit_field(update: Update, context: ContextTypes.DEFAULT_TYPE, field: str, teacher_id: int) -> None:
    user = update.effective_user
    chat_id = update.effective_chat.id

    if not is_admin(user.id):
        await context.bot.send_message(chat_id, '‚ùå Access denied. Admin only.')
        return

    teacher = next((t for t in teachers if t['id'] == teacher_id), None)
    if not teacher:
        await context.bot.send_message(chat_id, '‚ùå Model not found.')
        return

    # Set editing state
    teacher_edit_states[user.id] = {
        'state': TEACHER_EDIT_STATES['WAITING_FOR_VALUE'],
        'field': field,
        'teacher_id': teacher_id
    }

    current_value = teacher.get(field, 'Not set')
    if field == 'subjects' and isinstance(current_value, list):
        current_value = ', '.join(current_value)

    field_names = {
        'name': 'Name',
        'age': 'Age',
        'price': 'Price (per hour)',
        'subjects': 'Subjects (comma-separated)',
        'why_choose': 'Why Choose This Teacher',
        'bio': 'Biography',
        'education': 'Education',
        'experience': 'Experience',
        'rating': 'Rating (0-5)',
        'photo': 'Photo URL'
    }

    field_display = field_names.get(field, field.title())

    edit_message = f"""‚úèÔ∏è EDIT {field_display.upper()} ‚úèÔ∏è
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üíÉ Model: {teacher['name']}
üìù Field: {field_display}
üî∏ Current Value: {current_value}

Please enter the new value:"""

    await context.bot.send_message(chat_id, edit_message)

# Handle teacher editing process
async def handle_teacher_editing(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str) -> None:
    user = update.effective_user
    chat_id = update.effective_chat.id

    if not is_admin(user.id):
        await context.bot.send_message(chat_id, '‚ùå Access denied. Admin only.')
        return

    state_info = teacher_edit_states[user.id]

    if state_info['state'] == TEACHER_EDIT_STATES['WAITING_FOR_VALUE']:
        # Update existing teacher field
        teacher_id = state_info['teacher_id']
        field = state_info['field']

        teacher = next((t for t in teachers if t['id'] == teacher_id), None)
        if not teacher:
            await context.bot.send_message(chat_id, '‚ùå Model not found.')
            del teacher_edit_states[user.id]
            return

        # Process the value based on field type
        try:
            if field == 'age':
                teacher[field] = int(text)
            elif field == 'price':
                teacher[field] = float(text)
            elif field == 'rating':
                rating = float(text)
                if 0 <= rating <= 5:
                    teacher[field] = rating
                else:
                    await context.bot.send_message(chat_id, '‚ùå Rating must be between 0 and 5.')
                    return
            elif field == 'subjects':
                teacher[field] = [s.strip() for s in text.split(',')]
            else:
                teacher[field] = text

            await context.bot.send_message(
                chat_id,
                f"‚úÖ Successfully updated {field} for {teacher['name']}!"
            )

        except ValueError:
            await context.bot.send_message(chat_id, '‚ùå Invalid value format. Please try again.')
            return

        # Clean up state
        del teacher_edit_states[user.id]

    elif state_info['state'] == TEACHER_EDIT_STATES['WAITING_FOR_NEW_TEACHER']:
        # Add new teacher process
        await handle_add_teacher_step(update, context, text)

# Handle adding new teacher step by step
async def handle_add_teacher_step(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str) -> None:
    user = update.effective_user
    chat_id = update.effective_chat.id

    state_info = teacher_edit_states[user.id]
    step = state_info['step']
    teacher_data = state_info['teacher_data']

    if step == 'name':
        teacher_data['name'] = text
        state_info['step'] = 'age'
        await context.bot.send_message(
            chat_id,
            f"‚úÖ Name: {text}\n\nüìù Step 2: Age\nEnter the model's age:"
        )

    elif step == 'age':
        try:
            teacher_data['age'] = int(text)
            state_info['step'] = 'subjects'
            await context.bot.send_message(
                chat_id,
                f"‚úÖ Age: {text}\n\nüìù Step 3: Subjects\nEnter subjects (comma-separated):"
            )
        except ValueError:
            await context.bot.send_message(chat_id, '‚ùå Please enter a valid age number.')

    elif step == 'subjects':
        teacher_data['subjects'] = [s.strip() for s in text.split(',')]
        state_info['step'] = 'price'
        await context.bot.send_message(
            chat_id,
            f"‚úÖ Subjects: {text}\n\nüìù Step 4: Price\nEnter hourly rate ($):"
        )

    elif step == 'price':
        try:
            teacher_data['price'] = float(text)
            state_info['step'] = 'why_choose'
            await context.bot.send_message(
                chat_id,
                f"‚úÖ Price: ${text}/hour\n\nüìù Step 5: Why Choose\nEnter why students should choose this teacher:"
            )
        except ValueError:
            await context.bot.send_message(chat_id, '‚ùå Please enter a valid price number.')

    elif step == 'why_choose':
        teacher_data['why_choose'] = text
        state_info['step'] = 'bio'
        await context.bot.send_message(
            chat_id,
            f"‚úÖ Why Choose: {text[:50]}...\n\nüìù Step 6: Biography\nEnter teacher's bio:"
        )

    elif step == 'bio':
        teacher_data['bio'] = text
        state_info['step'] = 'education'
        await context.bot.send_message(
            chat_id,
            f"‚úÖ Bio: {text[:50]}...\n\nüìù Step 7: Education\nEnter education background:"
        )

    elif step == 'education':
        teacher_data['education'] = text
        state_info['step'] = 'experience'
        await context.bot.send_message(
            chat_id,
            f"‚úÖ Education: {text[:50]}...\n\nüìù Step 8: Experience\nEnter teaching experience:"
        )

    elif step == 'experience':
        teacher_data['experience'] = text
        state_info['step'] = 'rating'
        await context.bot.send_message(
            chat_id,
            f"‚úÖ Experience: {text[:50]}...\n\nüìù Step 9: Rating\nEnter rating (0-5):"
        )

    elif step == 'rating':
        try:
            rating = float(text)
            if 0 <= rating <= 5:
                teacher_data['rating'] = rating
                state_info['step'] = 'photo'
                await context.bot.send_message(
                    chat_id,
                    f"‚úÖ Rating: {rating}/5\n\nüìù Step 10: Photo\nEnter photo URL (or skip with 'none'):"
                )
            else:
                await context.bot.send_message(chat_id, '‚ùå Rating must be between 0 and 5.')
        except ValueError:
            await context.bot.send_message(chat_id, '‚ùå Please enter a valid rating number.')

    elif step == 'photo':
        if text.lower() != 'none':
            teacher_data['photo'] = text
        else:
            teacher_data['photo'] = None

        # Create new teacher
        new_teacher_id = max([t['id'] for t in teachers]) + 1 if teachers else 1
        teacher_data['id'] = new_teacher_id
        teacher_data['available'] = True

        teachers.append(teacher_data)

        # Send confirmation
        confirmation = f"""‚úÖ MODEL ADDED SUCCESSFULLY! ‚úÖ
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üë®‚Äçüè´ {teacher_data['name']} has been added to the system!

üìã Summary:
‚Ä¢ Age: {teacher_data['age']}
‚Ä¢ Subjects: {', '.join(teacher_data['subjects'])}
‚Ä¢ Price: ${teacher_data['price']}/hour
‚Ä¢ Rating: {teacher_data['rating']}/5
‚Ä¢ Status: Available

The model is now available for booking! üéâ"""

        await context.bot.send_message(chat_id, confirmation)

        # Clean up state
        del teacher_edit_states[user.id]

# New: User Profile System
async def show_user_profile(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    chat_id = update.effective_chat.id
    
    profile = user_profiles.get(user.id, {})
    referred_count = len(referrals.get(user.id, []))
    
    # Get current order info
    current_order = profile.get('current_order')
    current_order_text = ""
    if current_order:
        status_emoji = {"pending_payment": "‚è≥", "pending_admin_approval": "üîÑ", "confirmed": "‚úÖ", "rejected": "‚ùå"}
        emoji = status_emoji.get(current_order['status'], "‚ùì")
        payment_info = ""
        if current_order['payment_method'] == 'solcam_points':
            payment_info = f"ü™ô {current_order['points_used']} SolCam Points"
        else:
            payment_info = f"üí∞ ${current_order['price']}"
        
        current_order_text = f"""
üéØ CURRENT ORDER:
‚Ä¢ Model: {current_order['teacher_name']}
‚Ä¢ Status: {emoji} {current_order['status'].replace('_', ' ').title()}
‚Ä¢ Payment: {payment_info}
‚Ä¢ Booking ID: {current_order['booking_id']}
"""
    else:
        current_order_text = "\nüéØ CURRENT ORDER: None"

    profile_message = f"""üë§ YOUR PROFILE
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üëã Name: {user.full_name}
üÜî Username: @{user.username or 'Not set'}
üìÖ Member Since: {profile.get('join_date', 'N/A')}{current_order_text}

üìä STATISTICS:
‚Ä¢ Total Bookings: {profile.get('total_bookings', 0)}
‚Ä¢ Total Spent: ${profile.get('total_spent', 0)}
‚Ä¢ SolCam Points: ü™ô {profile.get('solcam_points', 0)}
‚Ä¢ Friends Referred: {referred_count}

ü™ô SOLCAM TOKEN AIRDROP:
‚Ä¢ Current Points: {profile.get('solcam_points', 0)} SolCam
‚Ä¢ Points = Future Tokens üöÄ
‚Ä¢ 1 Point = 1 Hour with Cam Girl

üéÅ REFERRAL PROGRAM:
‚Ä¢ Earn {REFERRAL_BONUS} SolCam point for each friend who joins!
‚Ä¢ Build your token portfolio before launch! 

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"""

    keyboard = [
        [InlineKeyboardButton("üéÅ Refer Friends", callback_data='referral_system')],
        [InlineKeyboardButton("üìã My Bookings", callback_data='my_bookings'), InlineKeyboardButton("üèÜ Leaderboard", callback_data='leaderboard')],
        [InlineKeyboardButton("üîô Back to Main", callback_data='back_to_main')]
    ]
    
    reply_markup = create_inline_keyboard(keyboard)
    await context.bot.send_message(chat_id, profile_message, reply_markup=reply_markup)

# New: Referral System
async def show_referral_system(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    chat_id = update.effective_chat.id
    
    referred_users = referrals.get(user.id, [])
    referral_link = f"https://t.me/{context.bot.username}?start={user.id}"
    
    referral_message = f"""üéÅ SOLCAM REFERRAL PROGRAM
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

ü™ô EARN SOLCAM POINTS FOR FUTURE AIRDROP!

üéØ How it works:
1. Share your referral link
2. Friend joins using your link
3. You earn {REFERRAL_BONUS} SolCam point
4. Friend gets access to our platform

üìä YOUR STATS:
‚Ä¢ Friends Referred: {len(referred_users)}
‚Ä¢ Total Earned: {len(referred_users) * REFERRAL_BONUS} SolCam Points
‚Ä¢ Available Points: {user_profiles.get(user.id, {}).get('solcam_points', 0)} SolCam

üîó YOUR REFERRAL LINK:
`{referral_link}`

üì± Share this link with friends to earn points!

üí° Benefits of SolCam Points:
‚Ä¢ Book cam girls for FREE with points
‚Ä¢ Points = Future tokens in airdrop üöÄ
‚Ä¢ Early adopter advantage
‚Ä¢ No payment needed, just points!

ü™ô 1 SolCam Point = 1 Hour with any cam girl!

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"""

    keyboard = [
        [InlineKeyboardButton("üì± Share Link", url=f"https://t.me/share/url?url={referral_link}&text=Join SOLCAM for amazing cam girls! üíã")],
        [InlineKeyboardButton("üë• My Referrals", callback_data='my_referrals'), InlineKeyboardButton("üèÜ Top Referrers", callback_data='top_referrers')],
        [InlineKeyboardButton("üîô Back to Profile", callback_data='my_profile')]
    ]
    
    reply_markup = create_inline_keyboard(keyboard)
    await context.bot.send_message(chat_id, referral_message, reply_markup=reply_markup)

# New: My Referrals
async def show_my_referrals(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    chat_id = update.effective_chat.id
    
    referred_users = referrals.get(user.id, [])
    
    if not referred_users:
        message = """üë• MY REFERRALS
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

You haven't referred anyone yet! üòî

üéØ Start earning by sharing your referral link:
‚Ä¢ Each friend = {} SolCam point for you
‚Ä¢ Points = Free cam girl sessions!

Share your link and start earning! ü™ô""".format(REFERRAL_BONUS)
    else:
        message = f"""üë• MY REFERRALS ({len(referred_users)})
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

"""
        for i, referred_id in enumerate(referred_users, 1):
            try:
                referred_user = await context.bot.get_chat(referred_id)
                name = referred_user.first_name or "Unknown"
                message += f"{i}. {name} (+{REFERRAL_BONUS} SolCam)\n"
            except:
                message += f"{i}. User ID: {referred_id} (+{REFERRAL_BONUS} SolCam)\n"
        
        message += f"\nü™ô Total Earned: {len(referred_users) * REFERRAL_BONUS} SolCam Points"
    
    keyboard = [
        [InlineKeyboardButton("üéÅ Refer More", callback_data='referral_system')],
        [InlineKeyboardButton("üîô Back", callback_data='referral_system')]
    ]
    
    reply_markup = create_inline_keyboard(keyboard)
    await context.bot.send_message(chat_id, message, reply_markup=reply_markup)

# New: My Bookings
async def show_my_bookings(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    chat_id = update.effective_chat.id
    
    user_bookings = [booking for booking in bookings if booking.get('student_id') == user.id]
    
    if not user_bookings:
        message = """üìã MY BOOKINGS
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

You haven't made any bookings yet! ü§î

üéØ Ready to start? Browse our amazing models:
‚Ä¢ Professional cam girls
‚Ä¢ Secure payments
‚Ä¢ Instant booking confirmation

Start your first booking now! üíã"""
    else:
        message = f"""üìã MY BOOKINGS ({len(user_bookings)})
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

"""
        for booking in user_bookings[-5:]:  # Show last 5 bookings
            teacher_name = booking.get('teacher_name', 'Unknown')
            status_emoji = "‚úÖ" if booking.get('status') == 'confirmed' else "‚è≥"
            message += f"{status_emoji} {teacher_name} - ${booking.get('price', 0)}\n"
            message += f"   üìÖ {booking.get('created_at', 'N/A')}\n\n"
        
        profile = user_profiles.get(user.id, {})
        message += f"üí∞ Total Spent: ${profile.get('total_spent', 0)}\n"
        message += f"üéÅ Available Bonus: ${profile.get('referral_bonus', 0)}"
    
    keyboard = [
        [InlineKeyboardButton("üíã Browse Models", callback_data='check_teachers')],
        [InlineKeyboardButton("üîô Back to Profile", callback_data='my_profile')]
    ]
    
    reply_markup = create_inline_keyboard(keyboard)
    await context.bot.send_message(chat_id, message, reply_markup=reply_markup)

# New: Leaderboard
async def show_leaderboard(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    chat_id = update.effective_chat.id
    
    # Create leaderboard based on referrals
    leaderboard = []
    for user_id, referred_list in referrals.items():
        try:
            user = await context.bot.get_chat(user_id)
            name = user.first_name or "Unknown"
            leaderboard.append((name, len(referred_list), user_id))
        except:
            leaderboard.append(("Unknown User", len(referred_list), user_id))
    
    leaderboard.sort(key=lambda x: x[1], reverse=True)
    
    message = """üèÜ REFERRAL LEADERBOARD
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

ü•á TOP REFERRERS:

"""
    
    if not leaderboard:
        message += "No referrals yet! Be the first! üéØ"
    else:
        medals = ["ü•á", "ü•à", "ü•â"]
        for i, (name, count, user_id) in enumerate(leaderboard[:10], 1):
            medal = medals[i-1] if i <= 3 else f"{i}."
            message += f"{medal} {name} - {count} referrals\n"
    
    message += f"\nü™ô Each referral = {REFERRAL_BONUS} SolCam point!"
    
    keyboard = [
        [InlineKeyboardButton("üéÅ Start Referring", callback_data='referral_system')],
        [InlineKeyboardButton("üîô Back to Profile", callback_data='my_profile')]
    ]
    
    reply_markup = create_inline_keyboard(keyboard)
    await context.bot.send_message(chat_id, message, reply_markup=reply_markup)

# Callback query handler
async def callback_query_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    user = update.effective_user
    chat_id = update.effective_chat.id
    callback_data = query.data

    try:
        if callback_data == 'check_teachers':
            await show_available_teachers(update, context)

        elif callback_data == 'admin':
            await admin(update, context)

        elif callback_data == 'manage_teachers':
            await manage_teachers(update, context)

        elif callback_data == 'view_bookings':
            await show_bookings_admin(update, context)

        elif callback_data == 'view_payments':
            await show_pending_payments(update, context)

        elif callback_data == 'view_points_bookings':
            await show_points_bookings_admin(update, context)

        elif callback_data == 'view_points_pending':
            await show_pending_points_bookings(update, context)

        elif callback_data == 'add_teacher':
            await add_teacher(update, context)

        elif callback_data == 'remove_teacher_menu':
            if not is_admin(user.id):
                await context.bot.send_message(chat_id, '‚ùå Access denied. Admin only.')
                return

            keyboard = [[InlineKeyboardButton(f"‚ùå Remove {teacher['name']}", callback_data=f"remove_teacher_{teacher['id']}")] for teacher in teachers]
            keyboard.append([InlineKeyboardButton("üîô Back", callback_data='manage_teachers')])
            reply_markup = create_inline_keyboard(keyboard)
            await context.bot.send_message(chat_id, 'üóëÔ∏è Remove Teachers:', reply_markup=reply_markup)

        elif callback_data == 'how_it_works':
            how_it_works_message = """‚ÑπÔ∏è HOW IT WORKS ‚ÑπÔ∏è
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üéØ Simple 4-Step Process:

1Ô∏è‚É£ Search your girl
   ‚Ä¢ check our available girls
   ‚Ä¢ choose your favorite girl
   ‚Ä¢ view her profile

2Ô∏è‚É£ Select & Book
   ‚Ä¢ Choose your beauty
   ‚Ä¢ Review pricing and availability
   ‚Ä¢ Confirm your booking

3Ô∏è‚É£ Secure Payment
   ‚Ä¢ Pay with Solana (secure & private)
   ‚Ä¢ Send payment screenshot
   ‚Ä¢ Wait for admin verification

4Ô∏è‚É£ get live with your lady
   ‚Ä¢ lady contacts you within 5 minutes
   ‚Ä¢ Schedule your first session
   ‚Ä¢ then enjoy on our service!

üí° Why Choose Us?
‚Ä¢ loyalty and trust
‚Ä¢ professional models
‚Ä¢ Easy booking process
‚Ä¢ Fast payment verification
‚Ä¢ Secure Bitcoin payments for privacy
‚Ä¢ 24/7 admin support for any issues

Ready to get started? Click "Browse Models" below! üöÄ"""

            keyboard = [
                [InlineKeyboardButton("üíÉ Browse Models", callback_data='check_teachers')],
                [InlineKeyboardButton("üîô Back to Main", callback_data='back_to_main')]
            ]
            reply_markup = create_inline_keyboard(keyboard)
            await context.bot.send_message(chat_id, how_it_works_message, reply_markup=reply_markup)

        elif callback_data == 'back_to_main':
            await start(update, context)

        elif callback_data == 'contact_support':
            support_message = f"""üí¨ CONTACT SUPPORT üí¨
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

ü§ù Need Help?
We're here to assist you 24/7!

üìû Support Contact:
{ADMIN_USERNAME}

üí° Common Issues:
‚Ä¢ Payment problems
‚Ä¢ Booking questions
‚Ä¢ Technical support
‚Ä¢ Account issues

We typically respond within 1-2 hours!"""

            keyboard = [
                [InlineKeyboardButton("üîô Back to Main", callback_data='back_to_main')]
            ]
            reply_markup = create_inline_keyboard(keyboard)
            await context.bot.send_message(chat_id, support_message, reply_markup=reply_markup)

        # New: Profile and Referral System Handlers
        elif callback_data == 'my_profile':
            await show_user_profile(update, context)

        elif callback_data == 'referral_system':
            await show_referral_system(update, context)

        elif callback_data == 'my_referrals':
            await show_my_referrals(update, context)

        elif callback_data == 'my_bookings':
            await show_my_bookings(update, context)

        elif callback_data == 'leaderboard':
            await show_leaderboard(update, context)

        elif callback_data == 'top_referrers':
            await show_leaderboard(update, context)  # Same as leaderboard

        elif callback_data.startswith('message_teacher_'):
            teacher_id = int(callback_data.split('_')[2])
            teacher = next((t for t in teachers if t['id'] == teacher_id), None)
            if teacher:
                message = f"""üí¨ MESSAGE {teacher['name'].upper()} üí¨
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

To message {teacher['name']} directly, please contact our admin who will connect you:

üìû Admin Contact: {ADMIN_USERNAME}

üí° What to include in your message:
‚Ä¢ Your preferred communication method
‚Ä¢ Questions about services
‚Ä¢ Scheduling preferences
‚Ä¢ Any special requests

Our admin will facilitate the connection within 5 minutes! üöÄ"""
                
                keyboard = [
                    [InlineKeyboardButton("üíÉ Book Now", callback_data=f"book_teacher_{teacher_id}")],
                    [InlineKeyboardButton("üîô Back to Models", callback_data='check_teachers')]
                ]
                reply_markup = create_inline_keyboard(keyboard)
                await context.bot.send_message(chat_id, message, reply_markup=reply_markup)

        elif callback_data.startswith('book_teacher_'):
            teacher_id = int(callback_data.split('_')[2])
            await handle_book_teacher(update, context, teacher_id)

        elif callback_data.startswith('profile_teacher_'):
            teacher_id = int(callback_data.split('_')[2])
            await show_teacher_profile(update, context, teacher_id)

        elif callback_data.startswith('edit_teacher_'):
            teacher_id = int(callback_data.split('_')[2])
            await edit_teacher(update, context, teacher_id)

        elif callback_data.startswith('edit_field_'):
            parts = callback_data.split('_')
            field = parts[2]
            teacher_id = int(parts[3])
            await handle_edit_field(update, context, field, teacher_id)

        elif callback_data.startswith('remove_teacher_'):
            teacher_id = int(callback_data.split('_')[2])
            await remove_teacher(update, context, teacher_id)

        elif callback_data.startswith('confirm_payment_'):
            booking_id = callback_data.split('_')[2]
            await handle_confirm_payment(update, context, booking_id)

        elif callback_data.startswith('reject_payment_'):
            booking_id = callback_data.split('_')[2]
            await handle_reject_payment(update, context, booking_id)

        elif callback_data.startswith('approve_points_'):
            booking_id = callback_data.split('_')[2]
            await handle_approve_points_booking(update, context, booking_id)

        elif callback_data.startswith('reject_points_'):
            booking_id = callback_data.split('_')[2]
            await handle_reject_points_booking(update, context, booking_id)

        else:
            await context.bot.send_message(
                chat_id,
                f'ü§î Unknown action: {callback_data}\n\n'
                f'Need help? Contact our admin: {ADMIN_USERNAME}\n\n'
                f'We\'re here to help! ü§ù'
            )

    except Exception as e:
        logger.error(f"Error in callback query handler: {e}")
        await context.bot.send_message(
            chat_id,
            "‚ùå An error occurred. Please try again or contact admin."
        )

# Handle photo uploads
async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    chat_id = update.effective_chat.id
    photo = update.message.photo[-1]  # Best quality

    # Check if this user has a pending payment
    booking = next((b for b in pending_payments.values() if b['student_id'] == user.id), None)

    if booking:
        await context.bot.send_message(
            chat_id,
            "üì∏ Payment screenshot received! Our admin will verify it shortly.\n\n"
            "‚è∞ You'll receive confirmation within 5 minutes."
        )

        student_username = user.username or "No username set"
        student_full_name = user.full_name or "Unknown"
        username_display = f"@{student_username}" if student_username != "No username set" else "‚ùå No username set"

        admin_message = f"""üì∏ PAYMENT SCREENSHOT RECEIVED! üì∏
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üë§ USER INFO:
üìù Name: {student_full_name}
üè∑Ô∏è Username: {username_display}
üÜî User ID: {user.id}
üìã Booking ID: {booking['id']}
üìÖ Received: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

‚ö° ACTION NEEDED: Review the screenshot and confirm/reject the payment."""

        keyboard = [
            [InlineKeyboardButton("‚úÖ Confirm Payment", callback_data=f"confirm_payment_{booking['id']}")],
            [InlineKeyboardButton("‚ùå Reject Payment", callback_data=f"reject_payment_{booking['id']}")]
        ]
        reply_markup = create_inline_keyboard(keyboard)

        for admin_id in ADMIN_IDS:
            try:
                await context.bot.send_message(admin_id, admin_message, reply_markup=reply_markup)
                await context.bot.send_photo(
                    chat_id=admin_id,
                    photo=photo.file_id,
                    caption=f"üí≥ Payment Proof from {student_full_name} ({username_display})"
                )
            except Exception as e:
                logger.error(f"Failed to send screenshot to admin {admin_id}: {e}")

    else:
        # Optional fallback if no pending booking
        await context.bot.send_message(
            chat_id,
            "üì∏ Photo received. If this is a payment screenshot, it will be reviewed shortly."
        )

# Handle text messages
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    chat_id = update.effective_chat.id
    text = update.message.text

    # Check if user is in teacher editing state
    if user.id in teacher_edit_states:
        await handle_teacher_editing(update, context, text)
        return

    # Default response for regular text
    await context.bot.send_message(
        chat_id,
        f"üí¨ I received your message: \"{text}\"\n\n"
        f"Use the menu buttons to navigate the bot.\n"
        f"Need help? Contact: {ADMIN_USERNAME}"
    )

# Error handler
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.error(f"Update {update} caused error {context.error}")

def main() -> None:
    """Start the bot."""
    # Initialize teachers
    initialize_teachers()

    # Create application
    application = Application.builder().token(BOT_TOKEN).build()

    # Add handlers
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("admin", admin))
    application.add_handler(CommandHandler("help", start))
    application.add_handler(CommandHandler("profile", show_user_profile))
    application.add_handler(CommandHandler("referral", show_referral_system))
    application.add_handler(CallbackQueryHandler(callback_query_handler))
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    application.add_error_handler(error_handler)

    # Start the bot
    logger.info("Starting bot...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()